files.in.dir,newbuild,check.tjm)#
} else {#
datafile = '../efc.tables/data.txt'#
sdata = read.delim(datafile)#
print(dim(sdata))#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm,sdata)#
}#
taxa.check = data.build[[1]]#
trait.check = data.build[[2]]#
units.check = data.build[[3]]#
dstates.check = data.build[[4]]#
new.sdata = data.build[[5]]#
indat.orig = data.build[[6]]#
#
print(taxa.check)#
print(trait.check)#
print(units.check)#
print(dstates.check)
new.sdata$value[1:10]
sdata = new.sdata
mtables = build.means(tjm1,traits,sdata)#
sdata = mtables[[1]]#
means = mtables[[2]]
means$value[1:10]
source('efc.R')
source('efc.R')
source('efc.R')
mtables = build.means(tjm1,traits,sdata)#
sdata = mtables[[1]]#
means = mtables[[2]]
means$value[1:10]
names(sdata)
names(traits)
source('efc.R')
newbuild = FALSE#
check.tjm = TRUE#
#
if (newbuild) {#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm)#
} else {#
datafile = '../efc.tables/data.txt'#
sdata = read.delim(datafile)#
print(dim(sdata))#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm,sdata)#
}#
taxa.check = data.build[[1]]#
trait.check = data.build[[2]]#
units.check = data.build[[3]]#
dstates.check = data.build[[4]]#
new.sdata = data.build[[5]]#
indat.orig = data.build[[6]]
source('efc.R')
tables = load.tables(table.dir)#
traits = tables[[1]]#
dstates = tables[[2]]#
sources = tables[[3]]#
files.in.dir = tables[[4]]
newbuild = FALSE#
check.tjm = TRUE#
#
if (newbuild) {#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm)#
} else {#
datafile = '../efc.tables/data.txt'#
sdata = read.delim(datafile)#
print(dim(sdata))#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm,sdata)#
}#
taxa.check = data.build[[1]]#
trait.check = data.build[[2]]#
units.check = data.build[[3]]#
dstates.check = data.build[[4]]#
new.sdata = data.build[[5]]#
indat.orig = data.build[[6]]
nc = ncol(newdata)
source('efc.R')
newbuild = FALSE#
check.tjm = TRUE#
#
if (newbuild) {#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm)#
} else {#
datafile = '../efc.tables/data.txt'#
sdata = read.delim(datafile)#
print(dim(sdata))#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm,sdata)#
}#
taxa.check = data.build[[1]]#
trait.check = data.build[[2]]#
units.check = data.build[[3]]#
dstates.check = data.build[[4]]#
new.sdata = data.build[[5]]#
indat.orig = data.build[[6]]
source('efc.R')
newbuild = FALSE#
check.tjm = TRUE#
#
if (newbuild) {#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm)#
} else {#
datafile = '../efc.tables/data.txt'#
sdata = read.delim(datafile)#
print(dim(sdata))#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm,sdata)#
}#
taxa.check = data.build[[1]]#
trait.check = data.build[[2]]#
units.check = data.build[[3]]#
dstates.check = data.build[[4]]#
new.sdata = data.build[[5]]#
indat.orig = data.build[[6]]
print(trait.check)#
print(units.check)#
print(dstates.check)
print(taxa.check)
dim(new.sdata)
sdata=read.delim('../efc.tables/data.txt')
dim(sdata)
range(new.sdata$value)
range(new.sdata$value[which(!is.na(new.sdata$value))])
new.sdata$value[1:100]
min(new.sdata$value)
min(new.sdata$value[which(!is.na(new.sdata$value))])
new.sdata$value[order(new.sdata$value)][1:100])
new.sdata$value[order(new.sdata$value)][1:100]
sdata = new.sdata
mtables = build.means(tjm1,traits,sdata)#
sdata = mtables[[1]]#
means = mtables[[2]]
sort(means$value)
dim(means)
dim(sdata)
means$dstate
sdata$dstate
sdata$source[which(sdata$source=='ackerly04an')]
newbuild = TRUE#
check.tjm = TRUE#
#
if (newbuild) {#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm)#
} else {#
datafile = '../efc.tables/data.txt'#
sdata = read.delim(datafile)#
print(dim(sdata))#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm,sdata)#
}#
taxa.check = data.build[[1]]#
trait.check = data.build[[2]]#
units.check = data.build[[3]]#
dstates.check = data.build[[4]]#
new.sdata = data.build[[5]]#
indat.orig = data.build[[6]]#
#
print(taxa.check)#
print(trait.check)#
print(units.check)#
print(dstates.check)
tables = load.tables(table.dir)#
traits = tables[[1]]#
dstates = tables[[2]]#
sources = tables[[3]]#
files.in.dir = tables[[4]]
newbuild = TRUE#
check.tjm = TRUE#
#
if (newbuild) {#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm)#
} else {#
datafile = '../efc.tables/data.txt'#
sdata = read.delim(datafile)#
print(dim(sdata))#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm,sdata)#
}#
taxa.check = data.build[[1]]#
trait.check = data.build[[2]]#
units.check = data.build[[3]]#
dstates.check = data.build[[4]]#
new.sdata = data.build[[5]]#
indat.orig = data.build[[6]]#
#
print(taxa.check)#
print(trait.check)#
print(units.check)#
print(dstates.check)
dim(sdata)
sdata$source[which(sdata$source=='ackerly04an')]
sdata$source
tables = load.tables(table.dir)#
traits = tables[[1]]#
dstates = tables[[2]]#
sources = tables[[3]]#
files.in.dir = tables[[4]]
tables = load.tables(table.dir)#
traits = tables[[1]]#
dstates = tables[[2]]#
sources = tables[[3]]#
files.in.dir = tables[[4]]
newbuild = FALSE#
check.tjm = TRUE#
#
if (newbuild) {#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm)#
} else {#
datafile = '../efc.tables/data.txt'#
sdata = read.delim(datafile)#
print(dim(sdata))#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm,sdata)#
}#
taxa.check = data.build[[1]]#
trait.check = data.build[[2]]#
units.check = data.build[[3]]#
dstates.check = data.build[[4]]#
new.sdata = data.build[[5]]#
indat.orig = data.build[[6]]#
#
print(taxa.check)#
print(trait.check)#
print(units.check)#
print(dstates.check)
print(trait.check)
mtables = build.means(tjm1,traits,sdata)#
sdata = mtables[[1]]#
means = mtables[[2]]
range(means$value)
means$value[1:100]
sdata$value[1:100]
files.in.dir
f=1
newbuild
if (!newbuild) {#
replace.lines = which(sdata$source%in%sources$name[file2list])#
if (length(replace.lines)>0) {#
sdata = sdata[-replace.lines,]#
if (nrow(sdata)>0) {#
for (c in ncol(sdata)) {#
if (class(sdata[,c])=='factor') #
sdata[,c] = as.character(sdata[,c])#
}#
} else newbuild = TRUE #
}#
}
taxa.check = NULL#
trait.check = NULL#
units.check = NULL#
dstates.check = NULL
source.file = files.in.dir[f]#
source.name = sources$name[file2list[f]]#
print(source.file)#
indat = read.delim(paste#
('../sources.to.enter',source.file,sep='/'))
indat$value[1:100]
for (i in 1:ncol(indat)) #
if (class(indat[,i])=='factor') #
indat[,i] = as.factor(as.character(indat[,i]))
indat$value[1:100]
tmp.data = data.frame(source,indat$id,indat$taxon,#
indat$trait,indat$dstate,indat$value,#
indat$units,indat$country,indat$state,#
indat$county,indat$place.name,#
indat$lat,indat$long,#
indat$collection,indat$accession)
source.name
source.name = sources$name[file2list[f]]
source.name
nfiles = length(files.in.dir)#
file2list = match(files.in.dir,sources$files)
source.file = files.in.dir[f]#
source.name = sources$name[file2list[f]]
source.name
if (!'dstate'%in%names(indat)) indat$dstate=NA#
if (!'country'%in%names(indat)) indat$country =NA#
if (!'state'%in%names(indat)) indat$state =NA#
if (!'county'%in%names(indat)) indat$county =NA#
if (!'place.name'%in%names(indat)) indat$place.name=NA#
if (!'lat'%in%names(indat)) indat$lat =NA#
if (!'long'%in%names(indat)) indat$long =NA#
if (!'latlong.conf'%in%names(indat)) #
indat$latlong.conf =NA#
if (!'collection'%in%names(indat)) indat$collection =NA#
if (!'accession'%in%names(indat)) indat$accession =NA#
#
tmp.data = data.frame(source.name,indat$id,indat$taxon,#
indat$trait,indat$dstate,indat$value,#
indat$units,indat$country,indat$state,#
indat$county,indat$place.name,#
indat$lat,indat$long,#
indat$collection,indat$accession)
tmp.data$value[1:100]
if (f==1) newdata=tmp.data else #
newdata = rbind(newdata,tmp.data)
names(newdata) = c('source','source.id',#
'taxon','trait','dstate','value','units','country',#
'state','county','place','lat','long',#
'collection','accession')
newdata$value[1:100]
newbuild = TRUE#
check.tjm = TRUE#
#
if (newbuild) {#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm)#
} else {#
datafile = '../efc.tables/data.txt'#
sdata = read.delim(datafile)#
print(dim(sdata))#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm,sdata)#
}#
taxa.check = data.build[[1]]#
trait.check = data.build[[2]]#
units.check = data.build[[3]]#
dstates.check = data.build[[4]]#
new.sdata = data.build[[5]]#
indat.orig = data.build[[6]]
new.sdata$value
source('efc.R')
tables = load.tables(table.dir)#
traits = tables[[1]]#
dstates = tables[[2]]#
sources = tables[[3]]#
files.in.dir = tables[[4]]
newbuild = TRUE#
check.tjm = TRUE#
#
if (newbuild) {#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm)#
} else {#
datafile = '../efc.tables/data.txt'#
sdata = read.delim(datafile)#
print(dim(sdata))#
data.build = build.data(tjm1,traits,sources,#
files.in.dir,newbuild,check.tjm,sdata)#
}#
taxa.check = data.build[[1]]#
trait.check = data.build[[2]]#
units.check = data.build[[3]]#
dstates.check = data.build[[4]]#
new.sdata = data.build[[5]]#
indat.orig = data.build[[6]]
trait.check
dim(new.sdata)
new.sdata$value[1:100]
new.sdata$value[which((new.sdata$source=='cornwell06')&(new.sdata$trait=='Wood density'))]
sdata = new.sdata
mtables = build.means(tjm1,traits,sdata)#
sdata = mtables[[1]]#
means = mtables[[2]]
means$value[1:100]
write.efc.tables(sources,files.in.dir,sdata,means)
table(v$AGE,v$LT,v$Area)
dim(means)
means$units[1:10]
table(means$units)
trait.list = unique(sdata$trait)#
ntraits = length(trait.list)
t=1\
t=1
tr2trt = match(trait.list[t],traits$trait)
dt = subset(sdata,(sdata$trait==trait.list[t])&!is.na(sdata$value))
traits$type[tr2trt]
units = rep(traits$units[match(trait.list[t],#
traits[,1])],length(tN))
tm = tapply(dt$value,dt$taxon,mean,na.rm=TRUE)#
tm = tm[which(!is.na(tm))]#
tm = signif(tm,digits=3)#
ts = rep(NA,length(tm)) #placeholder for dstate#
tN = tapply(dt$value,dt$taxon,length)#
tN = tN[which(!is.na(tN))]
tname = rep(trait.list[t],length(tN))#
taxon = row.names(tN)#
units = rep(traits$units[match(trait.list[t],#
traits[,1])],length(tN))
units
names(traits)
traits$units
units = rep(traits$units[match(trait.list[t],#
traits$trait)],length(tN))
units
dim(sdata)
mtables = build.means(tjm1,traits,sdata)#
sdata = mtables[[1]]#
means = mtables[[2]]
tables(means$units)
table(means$units)
source('efc.R')
mtables = build.means(tjm1,traits,sdata)#
sdata = mtables[[1]]#
means = mtables[[2]]
table(means$units)
write.efc.tables(sources,files.in.dir,sdata,means)
rm(list=ls())
source('~/Documents/Projects/EcologicalFloraCal/Prototype/dbase.proto/dbase.scripts/efc.R')
setwd('/Users/david/Documents/Projects/EcologicalFloraCal/Prototype/dbase.proto')
print(dir())
table.dir = '~/Documents/Projects/EcologicalFloraCal/Prototype/dbase.proto/info.tables'
tjm1=read.delim(paste(table.dir,'tjm1.txt',sep='/'))
tables = load.tables(table.dir)
traits = tables[[1]]
dstates = tables[[2]]
sources = tables[[3]]
files.in.dir = tables[[4]]
newbuild = TRUE
check.tjm = TRUE
traits
sources
files.in.dir
check.tjm
setwd('/Users/david/Documents/Projects/EcologicalFloraCal/Prototype/dbase.proto')
source('dbase.scripts/efc.R')
table.dir = 'info.tables'
tjm1=read.delim(paste(table.dir,'tjm1.txt',sep='/'))
tables = load.tables(table.dir)
traits = tables[[1]]
dstates = tables[[2]]
sources = tables[[3]]
files.in.dir = tables[[4]]
dim(traits)
head(traits)
dim(dstates)
head(dstates)
dim(sources)
head(sources)
files.in.dir
source('dbase.scripts/efc.R')
tables = load.tables(table.dir)
files.in.dir = tables[[4]]
files.in.dir
rm(list=ls())
setwd('/Users/david/Documents/Projects/EcologicalFloraCal/Prototype/dbase.proto')
source('dbase.scripts/efc.R')
table.dir = 'info.tables'
#load jepson93 taxonomy
tjm1=read.delim(paste(table.dir,'tjm1.txt',sep='/'))
# get list of source files in 'sources.to.enter'
tables = load.tables(table.dir)
traits = tables[[1]]
dstates = tables[[2]]
sources = tables[[3]]
files.in.dir = tables[[4]]
dim(traits)
head(traits)
dim(dstates)
head(dstates)
dim(sources)
head(sources)
dall <- read.csv('efc.tables/cdata-all.csv')
dst <- read.csv('efc.tables/ctaxontrait.csv')
dim(dall)
head(dall)
dim(dst)
head(dst)
qdir <- '/Users/david/Documents/Projects/Pepperwood/VegPlots_traits'
qf <- dir(qdir)
qf
qf <- dir(qdir)
qf
if ('species_list.csv' %in% qf) sq <- read.csv(paste(qdir,'species_list.csv',sep=''))
qdir <- '/Users/david/Documents/Projects/Pepperwood/VegPlots_traits/'
qf <- dir(qdir)
qf
if ('species_list.csv' %in% qf) sq <- read.csv(paste(qdir,'species_list.csv',sep=''))
head(sq)
head(dst)
sq$taxon <- paste(sq$genus,sq$species)
all(sq$taxon %in% dst$taxon)
sq$taxon %in% dst$taxon
cbind(sq$taxon,sq$taxon %in% dst$taxon)
if ('species_list.csv' %in% qf) sq <- read.csv(paste(qdir,'species_list.csv',sep=''))
head(sq)
sq$taxon <- paste(sq$genus,sq$species)
cbind(sq$taxon,sq$taxon %in% dst$taxon)
head(dst)
dst[grep('Pseudotsuga',dst$taxon),]
if ('species_list.csv' %in% qf) sq <- read.csv(paste(qdir,'species_list.csv',sep=''))
head(sq)
cbind(sq$taxon,sq$taxon %in% dst$taxon)
if ('species_list.csv' %in% qf) sq <- read.csv(paste(qdir,'species_list.csv',sep='',as.is=T))
head(sq)
if ('species_list.csv' %in% qf) sq <- read.csv(paste(qdir,'species_list.csv',sep=''),as.is=T)
head(sq)
cbind(sq$taxon,sq$taxon %in% dst$taxon)
if ('species_list.csv' %in% qf) sq <- read.csv(paste(qdir,'species_list.csv',sep=''),as.is=T)
head(sq)
cbind(sq$efc.taxon,sq$taxon %in% dst$taxon)
dst$taxon[grep('carpus',dst$taxon)]
dst$taxon[grep('Lithocarpus',dst$taxon)]
cbind(sq$efc.taxon,sq$taxon %in% dst$taxon)
cbind(sq$efc.taxon,sq$efc.taxon %in% dst$taxon)
qdst <- dst[dst$taxon %in% sq$efc.taxon,]
dim(qdst)
head(qdst)
qdall <- dall[dall$taxon %in% sq$efc.taxon,]
dim(qdst)
dim(qdall)
head(qdall)
write.csv(qdall,paste(qdir,'efc_trait_query.csv',sep=''),quote=F,row.names = F)
